DamageDetective$complexity <- ( min_max_scale(DamageDetective$rb.percent) +
(1 - min_max_scale(DamageDetective$mt.percent)) + # Inverse for mt.percent, highe it is the less complex cells are
min_max_scale(DamageDetective$nFeature_RNA)) / 3
mean( v)
mean(DamageDetective$complexity)
min(DamageDetective$complexity)
max(DamageDetective$complexity)
# Find the average complexity score for all undamaged cells
undamaged_cells <- subset(DamageDetective, seurat_clusters != "damaged")
head( undamaged_cells@meta.data)
complexity_threshold <- median(undamaged_cells$complexity)
complexity_threshold
complexity_threshold <- mean(undamaged_cells$complexity)
complexity_threshold
complexity_threshold <- quantile(undamaged_cells$complexity, probs = 0.25, na.rm = TRUE)
complexity_threshold
complexity_threshold <- quantile(undamaged_cells$complexity, probs = 0.1, na.rm = TRUE)
complexity_threshold
complexity_threshold <- quantile(undamaged_cells$complexity, probs = 0.05, na.rm = TRUE)
complexity_threshold
table(DamageDetective$seurat_clusters)
# Automatically find the damaged cell population
best_cluster <- DamageDetective@meta.data %>%
group_by(seurat_clusters) %>%
summarise(
avg_mt_percent = mean(mt.percent, na.rm = TRUE),
avg_rb_percent = mean(rb.percent, na.rm = TRUE)
) %>%
mutate(
rank_mt = rank(-avg_mt_percent),
rank_rb = rank(avg_rb_percent),
combined_rank = rank_mt + rank_rb
) %>%
arrange(combined_rank) %>%
slice(1:cluster_ranks) %>%
pull(seurat_clusters) %>%
as.character()
# Label all cells belonging to this cluster as "damaged"
DamageDetective$seurat_clusters <- ifelse(DamageDetective$seurat_clusters %in% best_cluster, 'damaged', DamageDetective$seurat_clusters)
table(DamageDetective$seurat_clusters)
# Apply min-max scaling for mt & rb percent expression and library size
# Value is out of 3 where closer to 0 is less complex, more likely to be damaged
DamageDetective$complexity <- ( min_max_scale(DamageDetective$rb.percent) +
(1 - min_max_scale(DamageDetective$mt.percent)) + # Inverse for mt.percent, highe it is the less complex cells are
min_max_scale(DamageDetective$nFeature_RNA)) / 3
# Find the median complexity score for all undamaged cells
undamaged_cells <- subset(DamageDetective, seurat_clusters != "damaged")
complexity_threshold <- quantile(undamaged_cells$complexity, probs = 0.05, na.rm = TRUE)
# Use this value as minimum threshold for retaining damaged label
DamageDetective$seurat_clusters <- ifelse(
# First, looking at cells in damage cluster
DamageDetective$seurat_clusters == "damaged" &
# Next, retain if they have sufficiently low complexity
DamageDetective$complexity <= complexity_threshold,
"damaged", 0)
table(eshold for retaining damaged label
table(DamageDetective$seurat_clusters)
# Add Cell QC meta data to object
DamageDetective$MtRb <- ifelse(DamageDetective$seurat_clusters == "damaged", "damaged", "cell")
# Calculated percentage of damaged cells
damaged <- subset(DamageDetective, MtRb == "damaged")
damagedCells <- length(Cells(damaged))
damaged_percent <- (damagedCells / initial_cells) * 100
# Add cluster #s to actual seurat object
Seurat$DamageDetective <- DamageDetective$MtRb
mt_plot <- FeaturePlot(DamageDetective, features = c("mt.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Mitochondrial gene expression") +
theme(
plot.title   = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
library(ggplot2)
mt_plot <- FeaturePlot(DamageDetective, features = c("mt.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Mitochondrial gene expression") +
theme(
plot.title   = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
rb_plot <- FeaturePlot(DamageDetective, features = c("rb.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Ribosomal gene expression") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
cluster_plot <- DimPlot(
DamageDetective, pt.size = 1, group.by = "MtRb", cols = c("cell" = "grey", "damaged" = "#6765ED")) +
labs(caption = expression("Damaged cells identified by " * italic("DamageDetective"))) + NoAxes() +
theme(
plot.title = element_blank(),
plot.caption = element_text(hjust = 0.5, size = 16),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1)
)
complexity_plot <- FeaturePlot(DamageDetective, features = c("nFeature_RNA"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
title <- project_name
label <- paste("Estimated damaged cells: ", round(damaged_percent, 2), "%, ", initial_cells, " cells")
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
complexity_plot <- FeaturePlot(DamageDetective, features = c("complexity"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
# Apply min-max scaling for mt & rb percent expression and library size
# Value is out of 3 where closer to 0 is less complex, more likely to be damaged
DamageDetective$complexity <- ( (DamageDetective$rb.percent / 100 ) +
((1 - (DamageDetective$mt.percent / 100 )) + # Inverse for mt.percent, highe it is the less complex cells are
min_max_scale(DamageDetective$nFeature_RNA)) / 3
# Find the median complexity score for all undamaged cells
undamaged_cells <- subset(DamageDetective, seurat_clusters != "damaged")
# Apply min-max scaling for mt & rb percent expression and library size
# Value is out of 3 where closer to 0 is less complex, more likely to be damaged
DamageDetective$complexity <- ((DamageDetective$rb.percent / 100 ) +
(1 - (DamageDetective$mt.percent / 100 )) + # Inverse for mt.percent, highe it is the less complex cells are
min_max_scale(DamageDetective$nFeature_RNA)) / 3
complexity_threshold <- quantile(undamaged_cells$complexity, probs = 0.05, na.rm = TRUE)
complexity_threshold
# Use this value as minimum threshold for retaining damaged label
DamageDetective$seurat_clusters <- ifelse(
# First, looking at cells in damage cluster
DamageDetective$seurat_clusters == "damaged" &
# Next, retain if they have sufficiently low complexity
DamageDetective$complexity <= complexity_threshold,
"damaged", 0)
# Add Cell QC meta data to object
DamageDetective$MtRb <- ifelse(DamageDetective$seurat_clusters == "damaged", "damaged", "cell")
# Calculated percentage of damaged cells
damaged <- subset(DamageDetective, MtRb == "damaged")
damagedCells <- length(Cells(damaged))
damaged_percent <- (damagedCells / initial_cells) * 100
# Add cluster #s to actual seurat object
Seurat$DamageDetective <- DamageDetective$MtRb
mt_plot <- FeaturePlot(DamageDetective, features = c("mt.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Mitochondrial gene expression") +
theme(
plot.title   = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
rb_plot <- FeaturePlot(DamageDetective, features = c("rb.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Ribosomal gene expression") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
cluster_plot <- DimPlot(
DamageDetective, pt.size = 1, group.by = "MtRb", cols = c("cell" = "grey", "damaged" = "#6765ED")) +
labs(caption = expression("Damaged cells identified by " * italic("DamageDetective"))) + NoAxes() +
theme(
plot.title = element_blank(),
plot.caption = element_text(hjust = 0.5, size = 16),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1)
)
complexity_plot <- FeaturePlot(DamageDetective, features = c("complexity"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
# Apply min-max scaling for mt & rb percent expression and library size
# Value is out of 3 where closer to 0 is less complex, more likely to be damaged
DamageDetective$complexity <- ((DamageDetective$rb.percent / 100 ) +
(1 - (DamageDetective$mt.percent / 100 )) + # Inverse for mt.percent, highe it is the less complex cells are
min_max_scale(Seurat$nFeature_RNA)) / 3
# Find the median complexity score for all undamaged cells
undamaged_cells <- subset(DamageDetective, seurat_clusters != "damaged")
complexity_threshold <- quantile(undamaged_cells$complexity, probs = 0.05, na.rm = TRUE)
complexity_threshold
# Use this value as minimum threshold for retaining damaged label
DamageDetective$seurat_clusters <- ifelse(
# First, looking at cells in damage cluster
DamageDetective$seurat_clusters == "damaged" &
# Next, retain if they have sufficiently low complexity
DamageDetective$complexity <= complexity_threshold,
"damaged", 0)
# Add Cell QC meta data to object
DamageDetective$MtRb <- ifelse(DamageDetective$seurat_clusters == "damaged", "damaged", "cell")
# Calculated percentage of damaged cells
damaged <- subset(DamageDetective, MtRb == "damaged")
damagedCells <- length(Cells(damaged))
damaged_percent <- (damagedCells / initial_cells) * 100
# Add cluster #s to actual seurat object
Seurat$DamageDetective <- DamageDetective$MtRb
mt_plot <- FeaturePlot(DamageDetective, features = c("mt.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Mitochondrial gene expression") +
theme(
plot.title   = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
rb_plot <- FeaturePlot(DamageDetective, features = c("rb.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Ribosomal gene expression") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
cluster_plot <- DimPlot(
DamageDetective, pt.size = 1, group.by = "MtRb", cols = c("cell" = "grey", "damaged" = "#6765ED")) +
labs(caption = expression("Damaged cells identified by " * italic("DamageDetective"))) + NoAxes() +
theme(
plot.title = element_blank(),
plot.caption = element_text(hjust = 0.5, size = 16),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1)
)
complexity_plot <- FeaturePlot(DamageDetective, features = c("complexity"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
complexity_plot <- FeaturePlot(DamageDetective, features = c("nFeature_RNA"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
# Get gene annotations for mitochondrial (MT) & ribosomal (RB) genes
mt_gene_annotations <- annotations[grep("^MT-", annotations$gene_name, perl=TRUE),]
# mt_gene_annotations <- mt_gene_annotations[grepl("protein_coding", mt_gene_annotations$gene_biotype, perl=TRUE),]
mt_genes <- mt_gene_annotations %>% pull(gene_name)
# isolate ribosomal genes
rps_genes <- annotations[grep("RPS", annotations$gene_name, perl=TRUE),]
rps_genes <- rps_genes[grepl("protein_coding", rps_genes$gene_biotype, perl=TRUE),]
rps_genes <- rps_genes %>% pull(gene_name)
rpl_genes <- annotations[grep("RPL", annotations$gene_name, perl=TRUE),]
rpl_genes <- rpl_genes[grepl("protein_coding", rpl_genes$gene_biotype, perl=TRUE),]
rpl_genes <- rpl_genes %>% pull(gene_name)
rb_genes  <- c(rps_genes, rpl_genes)
# combine mt and rb genes
mt_rb_genes <- c(mt_genes, rb_genes)
mt_rb_genes <- unique(mt_rb_genes)
# Reduce based on mt & rb genes only (this occurs in a separate Seurat object (DamageDetective))
DamageDetective <- subset(Seurat, features = intersect(mt_rb_genes, rownames(Seurat@assays$RNA)))
DamageDetective <- NormalizeData(DamageDetective, verbose = FALSE) %>%
FindVariableFeatures(verbose = FALSE) %>%
ScaleData(verbose = FALSE) %>%
RunPCA(verbose = FALSE) %>%
FindNeighbors(dims = 1:10, verbose = FALSE) %>%
FindClusters(resolution = resolution, verbose = FALSE) %>%
RunTSNE(dims = 1:10, verbose = FALSE, check_duplicates = FALSE)
# Annotations to the reduced object based on the unreduced seurat object (all genes)
DefaultAssay(DamageDetective) <- "RNA"
DefaultAssay(Seurat)  <- "RNA"
# Define mitochondrial expression
DamageDetective$mt.percent <- PercentageFeatureSet(
object   = Seurat,
features = intersect(mt_genes, rownames(Seurat@assays$RNA)),
assay    = "RNA"
)
# Transfer to actual Seurat object
Seurat$DamageDetective.mi <- DamageDetective$mt.percent
# Define ribosomal expression
DamageDetective$rb.percent <- PercentageFeatureSet(
object   = Seurat,
features = intersect(rb_genes, rownames(Seurat@assays$RNA)),
assay    = "RNA"
)
# Transfer to actual Seurat object
Seurat$DamageDetective.ri <- DamageDetective$rb.percent
# Automatically find the damaged cell population
best_cluster <- DamageDetective@meta.data %>%
group_by(seurat_clusters) %>%
summarise(
avg_mt_percent = mean(mt.percent, na.rm = TRUE),
avg_rb_percent = mean(rb.percent, na.rm = TRUE)
) %>%
mutate(
rank_mt = rank(-avg_mt_percent),
rank_rb = rank(avg_rb_percent),
combined_rank = rank_mt + rank_rb
) %>%
arrange(combined_rank) %>%
slice(1:cluster_ranks) %>%
pull(seurat_clusters) %>%
as.character()
# Label all cells belonging to this cluster as "damaged"
DamageDetective$seurat_clusters <- ifelse(DamageDetective$seurat_clusters %in% best_cluster, 'damaged', DamageDetective$seurat_clusters)
# Min-max scaling function
min_max_scale <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
}
# Apply min-max scaling for mt & rb percent expression and library size
# Value is out of 3 where closer to 0 is less complex, more likely to be damaged
DamageDetective$complexity <- ((DamageDetective$rb.percent / 100 ) +
(1 - (DamageDetective$mt.percent / 100 )) + # Inverse for mt.percent, highe it is the less complex cells are
min_max_scale(DamageDetective$nFeature_RNA)) / 3
# Find the median complexity score for all undamaged cells
undamaged_cells <- subset(DamageDetective, seurat_clusters != "damaged")
complexity_threshold <- quantile(undamaged_cells$complexity, probs = 0.05, na.rm = TRUE)
# Use this value as minimum threshold for retaining damaged label
DamageDetective$seurat_clusters <- ifelse(
# First, looking at cells in damage cluster
DamageDetective$seurat_clusters == "damaged" &
# Next, retain if they have sufficiently low complexity
DamageDetective$complexity <= complexity_threshold,
"damaged", 0)
# Add Cell QC meta data to object
DamageDetective$MtRb <- ifelse(DamageDetective$seurat_clusters == "damaged", "damaged", "cell")
# Calculated percentage of damaged cells
damaged <- subset(DamageDetective, MtRb == "damaged")
damagedCells <- length(Cells(damaged))
damaged_percent <- (damagedCells / initial_cells) * 100
# Add cluster #s to actual seurat object
Seurat$DamageDetective <- DamageDetective$MtRb
mt_plot <- FeaturePlot(DamageDetective, features = c("mt.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Mitochondrial gene expression") +
theme(
plot.title   = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
rb_plot <- FeaturePlot(DamageDetective, features = c("rb.percent"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Ribosomal gene expression") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
cluster_plot <- DimPlot(
DamageDetective, pt.size = 1, group.by = "MtRb", cols = c("cell" = "grey", "damaged" = "#6765ED")) +
labs(caption = expression("Damaged cells identified by " * italic("DamageDetective"))) + NoAxes() +
theme(
plot.title = element_blank(),
plot.caption = element_text(hjust = 0.5, size = 16),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1)
)
complexity_plot <- FeaturePlot(DamageDetective, features = c("nFeature_RNA"), cols = c("#E1E1E1", "#6765ED"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
mt_plot <- FeaturePlot(DamageDetective, features = c("mt.percent"), cols = c("#E1E1E1", "#0073CF"), pt.size = 1) +
NoAxes() + labs(caption = "Mitochondrial gene expression") +
theme(
plot.title   = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
rb_plot <- FeaturePlot(DamageDetective, features = c("rb.percent"), cols = c("#E1E1E1", "#0073CF"), pt.size = 1) +
NoAxes() + labs(caption = "Ribosomal gene expression") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
cluster_plot <- DimPlot(
DamageDetective, pt.size = 1, group.by = "MtRb", cols = c("cell" = "grey", "damaged" = "#0073CF")) +
labs(caption = expression("Damaged cells identified by " * italic("DamageDetective"))) + NoAxes() +
theme(
plot.title = element_blank(),
plot.caption = element_text(hjust = 0.5, size = 16),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1)
)
complexity_plot <- FeaturePlot(DamageDetective, features = c("nFeature_RNA"), cols = c("#E1E1E1", "maroon"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
cluster_plot <- DimPlot(
DamageDetective, pt.size = 1, group.by = "MtRb", cols = c("cell" = "grey", "damaged" = "maroon")) +
labs(caption = expression("Damaged cells identified by " * italic("DamageDetective"))) + NoAxes() +
theme(
plot.title = element_blank(),
plot.caption = element_text(hjust = 0.5, size = 16),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1)
)
complexity_plot <- FeaturePlot(DamageDetective, features = c("nFeature_RNA"), cols = c("#E1E1E1", "#0073CF"), pt.size = 1) +
NoAxes() + labs(caption = "Library size") +
theme(
plot.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
plot.caption = element_text(hjust = 0.5, size = 16))
(mt_plot | complexity_plot) / (rb_plot | cluster_plot)
library(scRNAseq)
# Gather test data
pbmc <- fetchDataset("kotliarov-pbmc-2020", "2024-04-18")
metadata <- colData(pbmc)
metadata$phenotype_sample <- paste0(metadata$adjmfc.time, "_", metadata$sample)
counts <- pbmc@assays@data$counts
rownames(counts) <- rownames(pbmc)
colnames(counts) <- colnames(pbmc)
counts  <- as(counts, "sparseMatrix")
high_sample <- subset(metadata, phenotype_sample == "d0 high_205_d0")
high_sample <- rownames(high_sample)
high_counts  <- counts[, high_sample]
library(Seurat)
# make seurat object
seurat <- CreateSeuratObject(counts = high_counts )
# Run damage detective
devtools::install_github("AlicenJoyHenning/DamageDetective", build_vignettes = TRUE)
library(DamageDetective)
test <- DamageDetective(output_path = "./Projects/Damage_analsyis/",
filter_output = FALSE,
seurat_input = seurat,
project_name = "test"
)
test <- DamageDetective(output_path = "./Projects/Damage_analsyis/",
filter_output = FALSE,
seurat_input = seurat,
project_name = "test"
)
test <- DamageDetective(output_path = "./Projects/Damage_analsyis",
filter_output = FALSE,
seurat_input = seurat,
project_name = "test"
)
data("test_data", package = "DamageDetective")
data("test_data", package = "DamageDetective")
data("human_annotations", package = "DamageDetective")
organism = "Hsap"
Seurat = test_data
annotations = human_annotations
resolution = 0.1
cluster_ranks = 1
initial_cells = 1000
project_name = "Test",
# Get gene annotations for mitochondrial (MT) & ribosomal (RB) genes
mt_gene_annotations <- annotations[grep("^MT-", annotations$gene_name, perl=TRUE),]
mt_gene_annotations <- mt_gene_annotations[grepl("protein_coding", mt_gene_annotations$gene_biotype, perl=TRUE),]
mt_genes <- mt_gene_annotations %>% pull(gene_name)
# isolate ribosomal genes
rps_genes <- annotations[grep("RPS", annotations$gene_name, perl=TRUE),]
library(dplyr)
# Get gene annotations for mitochondrial (MT) & ribosomal (RB) genes
mt_gene_annotations <- annotations[grep("^MT-", annotations$gene_name, perl=TRUE),]
mt_gene_annotations <- mt_gene_annotations[grepl("protein_coding", mt_gene_annotations$gene_biotype, perl=TRUE),]
mt_genes <- mt_gene_annotations %>% pull(gene_name)
# isolate ribosomal genes
rps_genes <- annotations[grep("RPS", annotations$gene_name, perl=TRUE),]
rps_genes <- rps_genes[grepl("protein_coding", rps_genes$gene_biotype, perl=TRUE),]
rps_genes <- rps_genes %>% pull(gene_name)
rpl_genes <- annotations[grep("RPL", annotations$gene_name, perl=TRUE),]
rpl_genes <- rpl_genes[grepl("protein_coding", rpl_genes$gene_biotype, perl=TRUE),]
rpl_genes <- rpl_genes %>% pull(gene_name)
rb_genes  <- c(rps_genes, rpl_genes)
# combine mt and rb genes
mt_rb_genes <- c(mt_genes, rb_genes)
mt_rb_genes <- unique(mt_rb_genes)
# Reduce based on mt & rb genes only (this occurs in a separate Seurat object (DamageDetective))
DamageDetective <- subset(Seurat, features = intersect(mt_rb_genes, rownames(Seurat@assays$RNA)))
DamageDetective <- NormalizeData(DamageDetective, verbose = FALSE) %>%
FindVariableFeatures(verbose = FALSE) %>%
ScaleData(verbose = FALSE) %>%
RunPCA(verbose = FALSE) %>%
FindNeighbors(dims = 1:10, verbose = FALSE) %>%
FindClusters(resolution = resolution, verbose = FALSE) %>%
RunTSNE(dims = 1:10, verbose = FALSE, check_duplicates = FALSE)
library(Seurat)
DamageDetective <- NormalizeData(DamageDetective, verbose = FALSE) %>%
FindVariableFeatures(verbose = FALSE) %>%
ScaleData(verbose = FALSE) %>%
RunPCA(verbose = FALSE) %>%
FindNeighbors(dims = 1:10, verbose = FALSE) %>%
FindClusters(resolution = resolution, verbose = FALSE) %>%
RunTSNE(dims = 1:10, verbose = FALSE, check_duplicates = FALSE)
# Annotations to the reduced object based on the unreduced seurat object (all genes)
DefaultAssay(DamageDetective) <- "RNA"
DefaultAssay(Seurat)  <- "RNA"
# Define mitochondrial expression
DamageDetective$mt.percent <- PercentageFeatureSet(
object   = Seurat,
features = intersect(mt_genes, rownames(Seurat@assays$RNA)),
assay    = "RNA"
)
# Transfer to actual Seurat object
Seurat$DamageDetective.mi <- DamageDetective$mt.percent
# Define ribosomal expression
DamageDetective$rb.percent <- PercentageFeatureSet(
object   = Seurat,
features = intersect(rb_genes, rownames(Seurat@assays$RNA)),
assay    = "RNA"
)
# Transfer to actual Seurat object
Seurat$DamageDetective.ri <- DamageDetective$rb.percent
# Automatically find the damaged cell population
best_cluster <- DamageDetective@meta.data %>%
group_by(seurat_clusters) %>%
summarise(
avg_mt_percent = mean(mt.percent, na.rm = TRUE),
avg_rb_percent = mean(rb.percent, na.rm = TRUE)
) %>%
mutate(
rank_mt = rank(-avg_mt_percent),
rank_rb = rank(avg_rb_percent),
combined_rank = rank_mt + rank_rb
) %>%
arrange(combined_rank) %>%
slice(1:cluster_ranks) %>%
pull(seurat_clusters) %>%
as.character()
# Label all cells belonging to this cluster as "damaged"
DamageDetective$seurat_clusters <- ifelse(DamageDetective$seurat_clusters %in% best_cluster, 'damaged', DamageDetective$seurat_clusters)
# Min-max scaling function
min_max_scale <- function(x) {
return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
}
# Apply min-max scaling for mt & rb percent expression and library size
# Value is out of 3 where closer to 0 is less complex, more likely to be damaged
DamageDetective$complexity <- ((DamageDetective$rb.percent / 100 ) +
(1 - (DamageDetective$mt.percent / 100 )) + # Inverse for mt.percent, highe it is the less complex cells are
min_max_scale(DamageDetective$nFeature_RNA)) / 3
check <- table(DamageDetective$seurat_clusters)
length(check)
# Find the median complexity score for all undamaged cells
clusters <- table(DamageDetective$seurat_clusters)
